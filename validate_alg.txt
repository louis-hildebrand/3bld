=LET(
    solved_cube,            "AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXX",
    neighbor_cw,            LAMBDA(i,
                                IFS(
                                    i =  1, 33,
                                    i =  3, 25,
                                    i =  5, 17,
                                    i =  7,  9,
                                    i =  9, 35,
                                    i = 11,  5,
                                    i = 13, 23,
                                    i = 15, 41,
                                    i = 17, 11,
                                    i = 19,  3,
                                    i = 21, 31,
                                    i = 23, 43,
                                    i = 25, 19,
                                    i = 27,  1,
                                    i = 29, 39,
                                    i = 31, 45,
                                    i = 33, 27,
                                    i = 35,  7,
                                    i = 37, 15,
                                    i = 39, 47,
                                    i = 41, 37,
                                    i = 43, 13,
                                    i = 45, 21,
                                    i = 47, 29

                                )
                            ),
    neighbor_ccw,           LAMBDA(i, neighbor_cw(neighbor_cw(i))),
    apply_commutator,       LAMBDA(rc, target1, target2,
                                LET(
                                    _comment,    "Find indices of targets and their neighbors (clockwise and counter-clockwise).",
                                    c_idx,       FIND("C", solved_cube),
                                    c_ncw_idx,   neighbor_cw(c_idx),
                                    c_nccw_idx,  neighbor_ccw(c_idx),
                                    t1_idx,      FIND(target1, solved_cube),
                                    t1_ncw_idx,  neighbor_cw(t1_idx),
                                    t1_nccw_idx, neighbor_ccw(t1_idx),
                                    t2_idx,      FIND(target2, solved_cube),
                                    t2_ncw_idx,  neighbor_cw(t2_idx),
                                    t2_nccw_idx, neighbor_ccw(t2_idx),
                                    REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                                        rc,
                                        t1_nccw_idx, 1, MID(rc, c_nccw_idx,  1)),
                                        t1_ncw_idx,  1, MID(rc, c_ncw_idx,   1)),
                                        t1_idx,      1, MID(rc, c_idx,       1)),
                                        t2_nccw_idx, 1, MID(rc, t1_nccw_idx, 1)),
                                        t2_ncw_idx,  1, MID(rc, t1_ncw_idx,  1)),
                                        t2_idx,      1, MID(rc, t1_idx,      1)),
                                        c_nccw_idx,  1, MID(rc, t2_nccw_idx, 1)),
                                        c_ncw_idx,   1, MID(rc, t2_ncw_idx,  1)),
                                        c_idx,       1, MID(rc, t2_idx,      1))
                                )
                            ),
    rearrange_cube,         LAMBDA(rc, indices,
                                JOIN("", MAP(indices, LAMBDA(i, MID(rc, i, 1))))
                            ),
    apply_move,             LAMBDA(rc, move,
                                IFS(
                                    move = "x" , rearrange_cube(rc, { 9,10,11,12,13,14,15,16,41,42,43,44,45,46,47,48,23,24,17,18,19,20,21,22, 5, 6, 7, 8, 1, 2, 3, 4,35,36,37,38,39,40,33,34,29,30,31,32,25,26,27,28}),
                                    move = "x2", rearrange_cube(rc, {41,42,43,44,45,46,47,48,29,30,31,32,25,26,27,28,21,22,23,24,17,18,19,20,13,14,15,16, 9,10,11,12,37,38,39,40,33,34,35,36, 1, 2, 3, 4, 5, 6, 7, 8}),
                                    move = "x'", rearrange_cube(rc, {29,30,31,32,25,26,27,28, 1, 2, 3, 4, 5, 6, 7, 8,19,20,21,22,23,24,17,18,45,46,47,48,41,42,43,44,39,40,33,34,35,36,37,38, 9,10,11,12,13,14,15,16}),
                                    move = "y" , rearrange_cube(rc, { 7, 8, 1, 2, 3, 4, 5, 6,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40, 9,10,11,12,13,14,15,16,43,44,45,46,47,48,41,42}),
                                    move = "y2", rearrange_cube(rc, { 5, 6, 7, 8, 1, 2, 3, 4,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,45,46,47,48,41,42,43,44}),
                                    move = "y'", rearrange_cube(rc, { 3, 4, 5, 6, 7, 8, 1, 2,33,34,35,36,37,38,39,40, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,47,48,41,42,43,44,45,46}),
                                    move = "z" , rearrange_cube(rc, {39,40,33,34,35,36,37,38,15,16, 9,10,11,12,13,14, 7, 8, 1, 2, 3, 4, 5, 6,27,28,29,30,31,32,25,26,47,48,41,42,43,44,45,46,23,24,17,18,19,20,21,22}),
                                    move = "z2", rearrange_cube(rc, {45,46,47,48,41,42,43,44,13,14,15,16, 9,10,11,12,37,38,39,40,33,34,35,36,29,30,31,32,25,26,27,28,21,22,23,24,17,18,19,20, 5, 6, 7, 8, 1, 2, 3, 4}),
                                    move = "z'", rearrange_cube(rc, {19,20,21,22,23,24,17,18,11,12,13,14,15,16, 9,10,43,44,45,46,47,48,41,42,31,32,25,26,27,28,29,30, 3, 4, 5, 6, 7, 8, 1, 2,35,36,37,38,39,40,33,34}),
                                    move = "U" , rearrange_cube(rc, { 7, 8, 1, 2, 3, 4, 5, 6,17,18,19,12,13,14,15,16,25,26,27,20,21,22,23,24,33,34,35,28,29,30,31,32, 9,10,11,36,37,38,39,40,41,42,43,44,45,46,47,48}),
                                    move = "U2", rearrange_cube(rc, { 5, 6, 7, 8, 1, 2, 3, 4,25,26,27,12,13,14,15,16,33,34,35,20,21,22,23,24, 9,10,11,28,29,30,31,32,17,18,19,36,37,38,39,40,41,42,43,44,45,46,47,48}),
                                    move = "U'", rearrange_cube(rc, { 3, 4, 5, 6, 7, 8, 1, 2,33,34,35,12,13,14,15,16, 9,10,11,20,21,22,23,24,17,18,19,28,29,30,31,32,25,26,27,36,37,38,39,40,41,42,43,44,45,46,47,48}),
                                    move = "F" , rearrange_cube(rc, { 1, 2, 3, 4,35,36,37, 8,15,16, 9,10,11,12,13,14, 7,18,19,20,21,22, 5, 6,25,26,27,28,29,30,31,32,33,34,41,42,43,38,39,40,23,24,17,44,45,46,47,48}),
                                    move = "F2", rearrange_cube(rc, { 1, 2, 3, 4,41,42,43, 8,13,14,15,16, 9,10,11,12,37,18,19,20,21,22,35,36,25,26,27,28,29,30,31,32,33,34,23,24,17,38,39,40, 5, 6, 7,44,45,46,47,48}),
                                    move = "F'", rearrange_cube(rc, { 1, 2, 3, 4,23,24,17, 8,11,12,13,14,15,16, 9,10,43,18,19,20,21,22,41,42,25,26,27,28,29,30,31,32,33,34, 5, 6, 7,38,39,40,35,36,37,44,45,46,47,48}),
                                    move = "R" , rearrange_cube(rc, { 1, 2,11,12,13, 6, 7, 8, 9,10,43,44,45,14,15,16,23,24,17,18,19,20,21,22, 5,26,27,28,29,30, 3, 4,33,34,35,36,37,38,39,40,41,42,31,32,25,46,47,48}),
                                    move = "R2", rearrange_cube(rc, { 1, 2,43,44,45, 6, 7, 8, 9,10,31,32,25,14,15,16,21,22,23,24,17,18,19,20,13,26,27,28,29,30,11,12,33,34,35,36,37,38,39,40,41,42, 3, 4, 5,46,47,48}),
                                    move = "R'", rearrange_cube(rc, { 1, 2,31,32,25, 6, 7, 8, 9,10, 3, 4, 5,14,15,16,19,20,21,22,23,24,17,18,45,26,27,28,29,30,43,44,33,34,35,36,37,38,39,40,41,42,11,12,13,46,47,48}),
                                    move = "B" , rearrange_cube(rc, {19,20,21, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,45,46,47,22,23,24,31,32,25,26,27,28,29,30, 3,34,35,36,37,38, 1, 2,41,42,43,44,39,40,33,48}),
                                    move = "B2", rearrange_cube(rc, {45,46,47, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,39,40,33,22,23,24,29,30,31,32,25,26,27,28,21,34,35,36,37,38,19,20,41,42,43,44, 1, 2, 3,48}),
                                    move = "B'", rearrange_cube(rc, {39,40,33, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18, 1, 2, 3,22,23,24,27,28,29,30,31,32,25,26,47,34,35,36,37,38,45,46,41,42,43,44,19,20,21,48}),
                                    move = "L" , rearrange_cube(rc, {29, 2, 3, 4, 5, 6,27,28, 1,10,11,12,13,14, 7, 8,17,18,19,20,21,22,23,24,25,26,47,48,41,30,31,32,39,40,33,34,35,36,37,38, 9,42,43,44,45,46,15,16}),
                                    move = "L2", rearrange_cube(rc, {41, 2, 3, 4, 5, 6,47,48,29,10,11,12,13,14,27,28,17,18,19,20,21,22,23,24,25,26,15,16, 9,30,31,32,37,38,39,40,33,34,35,36, 1,42,43,44,45,46, 7, 8}),
                                    move = "L'", rearrange_cube(rc, { 9, 2, 3, 4, 5, 6,15,16,41,10,11,12,13,14,47,48,17,18,19,20,21,22,23,24,25,26, 7, 8, 1,30,31,32,35,36,37,38,39,40,33,34,29,42,43,44,45,46,27,28}),
                                    move = "D" , rearrange_cube(rc, { 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,37,38,39,16,17,18,19,20,13,14,15,24,25,26,27,28,21,22,23,32,33,34,35,36,29,30,31,40,47,48,41,42,43,44,45,46}),
                                    move = "D2", rearrange_cube(rc, { 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,29,30,31,16,17,18,19,20,37,38,39,24,25,26,27,28,13,14,15,32,33,34,35,36,21,22,23,40,45,46,47,48,41,42,43,44}),
                                    move = "D'", rearrange_cube(rc, { 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,21,22,23,16,17,18,19,20,29,30,31,24,25,26,27,28,37,38,39,32,33,34,35,36,13,14,15,40,43,44,45,46,47,48,41,42})
                                )
                            ),
    apply_moveseq,          LAMBDA(rc, moves,
                                REDUCE(rc, SPLIT(moves, " "), LAMBDA(acc, x, apply_move(acc, x)))
                            ),
    invert_move,            LAMBDA(move,
                                IFS(
                                    REGEXMATCH(move, "[UFRBLDxyz]'"), LEFT(move, LEN(move) - 1),
                                    REGEXMATCH(move, "[UFRBLDxyz]2"), move,
                                    REGEXMATCH(move, "[UFRBLDxyz]"),  CONCAT(move, "'")
                                )
                            ),
    invert_moveseq,         LAMBDA(moves,
                                TRIM(REDUCE("", SPLIT(moves, " "), LAMBDA(acc, m, CONCATENATE(invert_move(m), " ", acc))))
                            ),
    moveseq_regex,          "[UFRBLDxyz'2 ]+",
    commutator_regex,       CONCATENATE("\[", moveseq_regex, ",", moveseq_regex, "\]"),
    conjugate_regex,        CONCATENATE("\[", moveseq_regex, ": *", commutator_regex, "\]"),
    split_left,             LAMBDA(x, sep,
                                TRIM(LEFT(RIGHT(x, LEN(x) - 1), FIND(sep, x) - 2))
                            ),
    split_right,            LAMBDA(x, sep,
                                TRIM(RIGHT(LEFT(x, LEN(x) - 1), LEN(x) - 1 - FIND(sep, x)))
                            ),
    apply_commutator_alg,   LAMBDA(rc, alg,
                                LET(
                                    comm1, split_left(alg, ","),
                                    comm2, split_right(alg, ","),
                                    apply_moveseq(apply_moveseq(apply_moveseq(apply_moveseq(rc, comm1), comm2), invert_moveseq(comm1)), invert_moveseq(comm2))
                                )
                            ),
    apply_conjugate_alg,    LAMBDA(rc, alg,
                                LET(
                                    setup, split_left(alg, ":"),
                                    comm,  split_right(alg, ":"),
                                    apply_moveseq(apply_commutator_alg(apply_moveseq(rc, setup), comm), invert_moveseq(setup))
                                )
                            ),
    is_alg_valid,           LAMBDA(alg, target1, target2,
                                apply_moveseq(solved_cube, alg) = apply_commutator(solved_cube, target1, target2)
                            ),
    alg,                    'Corner Comms'!B2,
    target1,                $A2,
    target2,                B$1,
    IFS(
        alg = "",
        "",
        REGEXMATCH(alg, CONCATENATE("^\d\. ", commutator_regex, "$")),
        LET(
            alg_without_category, RIGHT(alg, LEN(alg) - 3),
            apply_commutator_alg(solved_cube, alg_without_category) = apply_commutator(solved_cube, target1, target2)
        ),
        REGEXMATCH(alg, CONCATENATE("^\d\. ", conjugate_regex, "$")),
        LET(
            alg_without_category, RIGHT(alg, LEN(alg) - 3),
            apply_conjugate_alg(solved_cube, alg_without_category) = apply_commutator(solved_cube, target1, target2)
        )
    )
)

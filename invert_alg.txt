=LET(
    moveseq_regex,          "[UFRBLDxyz'2 ]+",
    commutator_regex,       CONCATENATE("\[", moveseq_regex, ",", moveseq_regex, "\]"),
    conjugate_regex,        CONCATENATE("\[", moveseq_regex, ": *", commutator_regex, "\]"),
    split_left,             LAMBDA(x, sep,
                                TRIM(LEFT(RIGHT(x, LEN(x) - 1), FIND(sep, x) - 2))
                            ),
    split_right,            LAMBDA(x, sep,
                                TRIM(RIGHT(LEFT(x, LEN(x) - 1), LEN(x) - 1 - FIND(sep, x)))
                            ),
    invert_move,            LAMBDA(move,
                                IFS(
                                    REGEXMATCH(move, "[UFRBLDxyz]'"), LEFT(move, LEN(move) - 1),
                                    REGEXMATCH(move, "[UFRBLDxyz]2"), move,
                                    REGEXMATCH(move, "[UFRBLDxyz]"),  CONCAT(move, "'")
                                )
                            ),
    invert_moveseq,         LAMBDA(moves,
                                TRIM(REDUCE("", SPLIT(moves, " "), LAMBDA(acc, m, CONCATENATE(invert_move(m), " ", acc))))
                            ),
    invert_pure_comm,       LAMBDA(alg,
                                CONCATENATE("[", split_right(alg, ","), ", ", split_left(alg, ","), "]")
                            ),
    invert_conj_comm,       LAMBDA(alg,
                                LET(
                                    setup,  split_left(alg, ":"),
                                    comm,   split_right(alg, ":"),
                                    CONCATENATE("[", setup, " : ", invert_pure_comm(comm), "]")
                                )
                            ),
    invert_named_alg,       LAMBDA(name,
                                INDEX(Algorithms!$C$2:$C, MATCH(TRIM(name), Algorithms!$A$2:$A, 0))
                            ),
    invert_conj_named,      LAMBDA(alg,
                                LET(
                                    setup,  split_left(alg, ":"),
                                    part2,  split_right(alg, ":"),
                                    CONCATENATE("[", setup, " : ", invert_named_alg(part2), "]")
                                )
                            ),
    invert_with_category,   LAMBDA(x, f,
                                LET(
                                    category,   LEFT(x, 1),
                                    alg,        RIGHT(x, LEN(x) - 3),
                                    CONCATENATE(category, ". ", f(alg))
                                )
                            ),
    x,                      TRIM(INDEX($B$2:$V$22, MATCH(B$1, $B$1:$V$1, 0), MATCH($A3, $B$1:$V$1, 0))),
    IFS(
        (x = "") + (x = "5. Corner twist"),
        x,
        REGEXMATCH(x, CONCATENATE("^\d\. ", commutator_regex, "$")),
        invert_with_category(x, invert_pure_comm),
        REGEXMATCH(x, CONCATENATE("^\d\. ", conjugate_regex, "$")),
        invert_with_category(x, invert_conj_comm),
        REGEXMATCH(x, CONCATENATE("^\d\. \[", moveseq_regex, ":.*\]")),
        invert_with_category(x, invert_conj_named),
        REGEXMATCH(x, CONCATENATE("\d\. ", moveseq_regex)),
        invert_with_category(x, invert_moveseq),
        REGEXMATCH(x, "^\d\. "),
        invert_with_category(x, invert_named_alg),
        TRUE,
        NA()
    )
)
